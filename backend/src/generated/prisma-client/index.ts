// Code generated by Prisma (prisma@1.19.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  city: (where?: CityWhereInput) => Promise<boolean>;
  olympiad: (where?: OlympiadWhereInput) => Promise<boolean>;
  question: (where?: QuestionWhereInput) => Promise<boolean>;
  school: (where?: SchoolWhereInput) => Promise<boolean>;
  test: (where?: TestWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  city: (where: CityWhereUniqueInput) => City;
  cities: (
    args?: {
      where?: CityWhereInput;
      orderBy?: CityOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CityNode>;
  citiesConnection: (
    args?: {
      where?: CityWhereInput;
      orderBy?: CityOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CityConnection;
  olympiad: (where: OlympiadWhereUniqueInput) => Olympiad;
  olympiads: (
    args?: {
      where?: OlympiadWhereInput;
      orderBy?: OlympiadOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<OlympiadNode>;
  olympiadsConnection: (
    args?: {
      where?: OlympiadWhereInput;
      orderBy?: OlympiadOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => OlympiadConnection;
  question: (where: QuestionWhereUniqueInput) => Question;
  questions: (
    args?: {
      where?: QuestionWhereInput;
      orderBy?: QuestionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<QuestionNode>;
  questionsConnection: (
    args?: {
      where?: QuestionWhereInput;
      orderBy?: QuestionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => QuestionConnection;
  school: (where: SchoolWhereUniqueInput) => School;
  schools: (
    args?: {
      where?: SchoolWhereInput;
      orderBy?: SchoolOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<SchoolNode>;
  schoolsConnection: (
    args?: {
      where?: SchoolWhereInput;
      orderBy?: SchoolOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SchoolConnection;
  test: (where: TestWhereUniqueInput) => Test;
  tests: (
    args?: {
      where?: TestWhereInput;
      orderBy?: TestOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<TestNode>;
  testsConnection: (
    args?: {
      where?: TestWhereInput;
      orderBy?: TestOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TestConnection;
  user: (where: UserWhereUniqueInput) => User;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserNode>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCity: (data: CityCreateInput) => City;
  updateCity: (
    args: { data: CityUpdateInput; where: CityWhereUniqueInput }
  ) => City;
  updateManyCities: (
    args: { data: CityUpdateInput; where?: CityWhereInput }
  ) => BatchPayload;
  upsertCity: (
    args: {
      where: CityWhereUniqueInput;
      create: CityCreateInput;
      update: CityUpdateInput;
    }
  ) => City;
  deleteCity: (where: CityWhereUniqueInput) => City;
  deleteManyCities: (where?: CityWhereInput) => BatchPayload;
  createOlympiad: (data: OlympiadCreateInput) => Olympiad;
  updateOlympiad: (
    args: { data: OlympiadUpdateInput; where: OlympiadWhereUniqueInput }
  ) => Olympiad;
  updateManyOlympiads: (
    args: { data: OlympiadUpdateInput; where?: OlympiadWhereInput }
  ) => BatchPayload;
  upsertOlympiad: (
    args: {
      where: OlympiadWhereUniqueInput;
      create: OlympiadCreateInput;
      update: OlympiadUpdateInput;
    }
  ) => Olympiad;
  deleteOlympiad: (where: OlympiadWhereUniqueInput) => Olympiad;
  deleteManyOlympiads: (where?: OlympiadWhereInput) => BatchPayload;
  createQuestion: (data: QuestionCreateInput) => Question;
  updateQuestion: (
    args: { data: QuestionUpdateInput; where: QuestionWhereUniqueInput }
  ) => Question;
  updateManyQuestions: (
    args: { data: QuestionUpdateInput; where?: QuestionWhereInput }
  ) => BatchPayload;
  upsertQuestion: (
    args: {
      where: QuestionWhereUniqueInput;
      create: QuestionCreateInput;
      update: QuestionUpdateInput;
    }
  ) => Question;
  deleteQuestion: (where: QuestionWhereUniqueInput) => Question;
  deleteManyQuestions: (where?: QuestionWhereInput) => BatchPayload;
  createSchool: (data: SchoolCreateInput) => School;
  updateSchool: (
    args: { data: SchoolUpdateInput; where: SchoolWhereUniqueInput }
  ) => School;
  updateManySchools: (
    args: { data: SchoolUpdateInput; where?: SchoolWhereInput }
  ) => BatchPayload;
  upsertSchool: (
    args: {
      where: SchoolWhereUniqueInput;
      create: SchoolCreateInput;
      update: SchoolUpdateInput;
    }
  ) => School;
  deleteSchool: (where: SchoolWhereUniqueInput) => School;
  deleteManySchools: (where?: SchoolWhereInput) => BatchPayload;
  createTest: (data: TestCreateInput) => Test;
  updateTest: (
    args: { data: TestUpdateInput; where: TestWhereUniqueInput }
  ) => Test;
  updateManyTests: (
    args: { data: TestUpdateInput; where?: TestWhereInput }
  ) => BatchPayload;
  upsertTest: (
    args: {
      where: TestWhereUniqueInput;
      create: TestCreateInput;
      update: TestUpdateInput;
    }
  ) => Test;
  deleteTest: (where: TestWhereUniqueInput) => Test;
  deleteManyTests: (where?: TestWhereInput) => BatchPayload;
  createUser: (data: UserCreateInput) => User;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => User;
  updateManyUsers: (
    args: { data: UserUpdateInput; where?: UserWhereInput }
  ) => BatchPayload;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  city: (
    where?: CitySubscriptionWhereInput
  ) => CitySubscriptionPayloadSubscription;
  olympiad: (
    where?: OlympiadSubscriptionWhereInput
  ) => OlympiadSubscriptionPayloadSubscription;
  question: (
    where?: QuestionSubscriptionWhereInput
  ) => QuestionSubscriptionPayloadSubscription;
  school: (
    where?: SchoolSubscriptionWhereInput
  ) => SchoolSubscriptionPayloadSubscription;
  test: (
    where?: TestSubscriptionWhereInput
  ) => TestSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type TestOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC";

export type OlympiadOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC"
  | "year_ASC"
  | "year_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type QuestionType = "MULTIPLE_CHOICE" | "OPEN_ENDED";

export type QuestionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "wording_ASC"
  | "wording_DESC"
  | "imageUrl_ASC"
  | "imageUrl_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CityOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SchoolOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "pedagogyCoord_ASC"
  | "pedagogyCoord_DESC"
  | "director_ASC"
  | "director_DESC"
  | "address_ASC"
  | "address_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface CityUpdateInput {
  name?: String;
}

export type CityWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface SchoolWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  olympiadCood?: UserWhereInput;
  pedagogyCoord?: String;
  pedagogyCoord_not?: String;
  pedagogyCoord_in?: String[] | String;
  pedagogyCoord_not_in?: String[] | String;
  pedagogyCoord_lt?: String;
  pedagogyCoord_lte?: String;
  pedagogyCoord_gt?: String;
  pedagogyCoord_gte?: String;
  pedagogyCoord_contains?: String;
  pedagogyCoord_not_contains?: String;
  pedagogyCoord_starts_with?: String;
  pedagogyCoord_not_starts_with?: String;
  pedagogyCoord_ends_with?: String;
  pedagogyCoord_not_ends_with?: String;
  director?: String;
  director_not?: String;
  director_in?: String[] | String;
  director_not_in?: String[] | String;
  director_lt?: String;
  director_lte?: String;
  director_gt?: String;
  director_gte?: String;
  director_contains?: String;
  director_not_contains?: String;
  director_starts_with?: String;
  director_not_starts_with?: String;
  director_ends_with?: String;
  director_not_ends_with?: String;
  city?: CityWhereInput;
  address?: String;
  address_not?: String;
  address_in?: String[] | String;
  address_not_in?: String[] | String;
  address_lt?: String;
  address_lte?: String;
  address_gt?: String;
  address_gte?: String;
  address_contains?: String;
  address_not_contains?: String;
  address_starts_with?: String;
  address_not_starts_with?: String;
  address_ends_with?: String;
  address_not_ends_with?: String;
  AND?: SchoolWhereInput[] | SchoolWhereInput;
  OR?: SchoolWhereInput[] | SchoolWhereInput;
  NOT?: SchoolWhereInput[] | SchoolWhereInput;
}

export interface TestCreateWithoutAuthorInput {
  title: String;
  description: String;
}

export interface CityWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: CityWhereInput[] | CityWhereInput;
  OR?: CityWhereInput[] | CityWhereInput;
  NOT?: CityWhereInput[] | CityWhereInput;
}

export interface UserCreateInput {
  email: String;
  password: String;
  name: String;
  tests?: TestCreateManyWithoutAuthorInput;
}

export interface CityUpdateOneRequiredInput {
  create?: CityCreateInput;
  update?: CityUpdateDataInput;
  upsert?: CityUpsertNestedInput;
  connect?: CityWhereUniqueInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface SchoolUpdateInput {
  name?: String;
  email?: String;
  phone?: String;
  olympiadCood?: UserUpdateOneRequiredInput;
  pedagogyCoord?: String;
  director?: String;
  city?: CityUpdateOneRequiredInput;
  address?: String;
}

export interface SchoolSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SchoolWhereInput;
  AND?: SchoolSubscriptionWhereInput[] | SchoolSubscriptionWhereInput;
  OR?: SchoolSubscriptionWhereInput[] | SchoolSubscriptionWhereInput;
  NOT?: SchoolSubscriptionWhereInput[] | SchoolSubscriptionWhereInput;
}

export interface CityCreateOneInput {
  create?: CityCreateInput;
  connect?: CityWhereUniqueInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  tests_every?: TestWhereInput;
  tests_some?: TestWhereInput;
  tests_none?: TestWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export type TestWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface OlympiadSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: OlympiadWhereInput;
  AND?: OlympiadSubscriptionWhereInput[] | OlympiadSubscriptionWhereInput;
  OR?: OlympiadSubscriptionWhereInput[] | OlympiadSubscriptionWhereInput;
  NOT?: OlympiadSubscriptionWhereInput[] | OlympiadSubscriptionWhereInput;
}

export interface SchoolCreateInput {
  name: String;
  email: String;
  phone?: String;
  olympiadCood: UserCreateOneInput;
  pedagogyCoord?: String;
  director?: String;
  city: CityCreateOneInput;
  address?: String;
}

export interface CitySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CityWhereInput;
  AND?: CitySubscriptionWhereInput[] | CitySubscriptionWhereInput;
  OR?: CitySubscriptionWhereInput[] | CitySubscriptionWhereInput;
  NOT?: CitySubscriptionWhereInput[] | CitySubscriptionWhereInput;
}

export interface QuestionUpdateInput {
  type?: QuestionType;
  wording?: String;
  imageUrl?: String;
}

export interface UserUpsertWithoutTestsInput {
  update: UserUpdateWithoutTestsDataInput;
  create: UserCreateWithoutTestsInput;
}

export interface QuestionCreateInput {
  type: QuestionType;
  wording: String;
  imageUrl?: String;
}

export type QuestionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface TestUpdateInput {
  title?: String;
  description?: String;
  author?: UserUpdateOneRequiredWithoutTestsInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserCreateWithoutTestsInput {
  email: String;
  password: String;
  name: String;
}

export interface TestUpsertWithWhereUniqueWithoutAuthorInput {
  where: TestWhereUniqueInput;
  update: TestUpdateWithoutAuthorDataInput;
  create: TestCreateWithoutAuthorInput;
}

export interface TestCreateInput {
  title: String;
  description: String;
  author: UserCreateOneWithoutTestsInput;
}

export interface TestUpdateWithoutAuthorDataInput {
  title?: String;
  description?: String;
}

export type SchoolWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface TestUpdateWithWhereUniqueWithoutAuthorInput {
  where: TestWhereUniqueInput;
  data: TestUpdateWithoutAuthorDataInput;
}

export type OlympiadWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface TestWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  author?: UserWhereInput;
  AND?: TestWhereInput[] | TestWhereInput;
  OR?: TestWhereInput[] | TestWhereInput;
  NOT?: TestWhereInput[] | TestWhereInput;
}

export interface OlympiadWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  isPublished?: Boolean;
  isPublished_not?: Boolean;
  year?: DateTimeInput;
  year_not?: DateTimeInput;
  year_in?: DateTimeInput[] | DateTimeInput;
  year_not_in?: DateTimeInput[] | DateTimeInput;
  year_lt?: DateTimeInput;
  year_lte?: DateTimeInput;
  year_gt?: DateTimeInput;
  year_gte?: DateTimeInput;
  createdBy?: UserWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: OlympiadWhereInput[] | OlympiadWhereInput;
  OR?: OlympiadWhereInput[] | OlympiadWhereInput;
  NOT?: OlympiadWhereInput[] | OlympiadWhereInput;
}

export interface CityCreateInput {
  name: String;
}

export interface UserUpdateWithoutTestsDataInput {
  email?: String;
  password?: String;
  name?: String;
}

export interface TestUpdateManyWithoutAuthorInput {
  create?: TestCreateWithoutAuthorInput[] | TestCreateWithoutAuthorInput;
  delete?: TestWhereUniqueInput[] | TestWhereUniqueInput;
  connect?: TestWhereUniqueInput[] | TestWhereUniqueInput;
  disconnect?: TestWhereUniqueInput[] | TestWhereUniqueInput;
  update?:
    | TestUpdateWithWhereUniqueWithoutAuthorInput[]
    | TestUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | TestUpsertWithWhereUniqueWithoutAuthorInput[]
    | TestUpsertWithWhereUniqueWithoutAuthorInput;
}

export interface QuestionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  type?: QuestionType;
  type_not?: QuestionType;
  type_in?: QuestionType[] | QuestionType;
  type_not_in?: QuestionType[] | QuestionType;
  wording?: String;
  wording_not?: String;
  wording_in?: String[] | String;
  wording_not_in?: String[] | String;
  wording_lt?: String;
  wording_lte?: String;
  wording_gt?: String;
  wording_gte?: String;
  wording_contains?: String;
  wording_not_contains?: String;
  wording_starts_with?: String;
  wording_not_starts_with?: String;
  wording_ends_with?: String;
  wording_not_ends_with?: String;
  imageUrl?: String;
  imageUrl_not?: String;
  imageUrl_in?: String[] | String;
  imageUrl_not_in?: String[] | String;
  imageUrl_lt?: String;
  imageUrl_lte?: String;
  imageUrl_gt?: String;
  imageUrl_gte?: String;
  imageUrl_contains?: String;
  imageUrl_not_contains?: String;
  imageUrl_starts_with?: String;
  imageUrl_not_starts_with?: String;
  imageUrl_ends_with?: String;
  imageUrl_not_ends_with?: String;
  AND?: QuestionWhereInput[] | QuestionWhereInput;
  OR?: QuestionWhereInput[] | QuestionWhereInput;
  NOT?: QuestionWhereInput[] | QuestionWhereInput;
}

export interface UserUpdateDataInput {
  email?: String;
  password?: String;
  name?: String;
  tests?: TestUpdateManyWithoutAuthorInput;
}

export interface CityUpsertNestedInput {
  update: CityUpdateDataInput;
  create: CityCreateInput;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface TestSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TestWhereInput;
  AND?: TestSubscriptionWhereInput[] | TestSubscriptionWhereInput;
  OR?: TestSubscriptionWhereInput[] | TestSubscriptionWhereInput;
  NOT?: TestSubscriptionWhereInput[] | TestSubscriptionWhereInput;
}

export interface TestCreateManyWithoutAuthorInput {
  create?: TestCreateWithoutAuthorInput[] | TestCreateWithoutAuthorInput;
  connect?: TestWhereUniqueInput[] | TestWhereUniqueInput;
}

export interface OlympiadUpdateInput {
  name?: String;
  isPublished?: Boolean;
  year?: DateTimeInput;
  createdBy?: UserUpdateOneRequiredInput;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface OlympiadCreateInput {
  name: String;
  isPublished?: Boolean;
  year: DateTimeInput;
  createdBy: UserCreateOneInput;
}

export interface QuestionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: QuestionWhereInput;
  AND?: QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput;
  OR?: QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput;
  NOT?: QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput;
}

export interface CityUpdateDataInput {
  name?: String;
}

export interface UserCreateOneWithoutTestsInput {
  create?: UserCreateWithoutTestsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateOneRequiredWithoutTestsInput {
  create?: UserCreateWithoutTestsInput;
  update?: UserUpdateWithoutTestsDataInput;
  upsert?: UserUpsertWithoutTestsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateInput {
  email?: String;
  password?: String;
  name?: String;
  tests?: TestUpdateManyWithoutAuthorInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValuesNode {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
}

export interface UserPreviousValues
  extends Promise<UserPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOlympiadNode {
  count: Int;
}

export interface AggregateOlympiad
  extends Promise<AggregateOlympiadNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOlympiadSubscription
  extends Promise<AsyncIterator<AggregateOlympiadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CityEdgeNode {
  cursor: String;
}

export interface CityEdge extends Promise<CityEdgeNode>, Fragmentable {
  node: <T = City>() => T;
  cursor: () => Promise<String>;
}

export interface CityEdgeSubscription
  extends Promise<AsyncIterator<CityEdgeNode>>,
    Fragmentable {
  node: <T = CitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OlympiadEdgeNode {
  cursor: String;
}

export interface OlympiadEdge extends Promise<OlympiadEdgeNode>, Fragmentable {
  node: <T = Olympiad>() => T;
  cursor: () => Promise<String>;
}

export interface OlympiadEdgeSubscription
  extends Promise<AsyncIterator<OlympiadEdgeNode>>,
    Fragmentable {
  node: <T = OlympiadSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCityNode {
  count: Int;
}

export interface AggregateCity
  extends Promise<AggregateCityNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCitySubscription
  extends Promise<AsyncIterator<AggregateCityNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OlympiadConnectionNode {}

export interface OlympiadConnection
  extends Promise<OlympiadConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<OlympiadEdgeNode>>() => T;
  aggregate: <T = AggregateOlympiad>() => T;
}

export interface OlympiadConnectionSubscription
  extends Promise<AsyncIterator<OlympiadConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OlympiadEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOlympiadSubscription>() => T;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUser
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnectionNode {}

export interface UserConnection
  extends Promise<UserConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<UserEdgeNode>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateTestNode {
  count: Int;
}

export interface AggregateTest
  extends Promise<AggregateTestNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTestSubscription
  extends Promise<AsyncIterator<AggregateTestNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CitySubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CitySubscriptionPayload
  extends Promise<CitySubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = City>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CityPreviousValues>() => T;
}

export interface CitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CitySubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CityPreviousValuesSubscription>() => T;
}

export interface TestConnectionNode {}

export interface TestConnection
  extends Promise<TestConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<TestEdgeNode>>() => T;
  aggregate: <T = AggregateTest>() => T;
}

export interface TestConnectionSubscription
  extends Promise<AsyncIterator<TestConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TestEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTestSubscription>() => T;
}

export interface CityPreviousValuesNode {
  id: ID_Output;
  name: String;
}

export interface CityPreviousValues
  extends Promise<CityPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CityPreviousValuesSubscription
  extends Promise<AsyncIterator<CityPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface SchoolEdgeNode {
  cursor: String;
}

export interface SchoolEdge extends Promise<SchoolEdgeNode>, Fragmentable {
  node: <T = School>() => T;
  cursor: () => Promise<String>;
}

export interface SchoolEdgeSubscription
  extends Promise<AsyncIterator<SchoolEdgeNode>>,
    Fragmentable {
  node: <T = SchoolSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TestNode {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  description: String;
}

export interface Test extends Promise<TestNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  author: <T = User>() => T;
}

export interface TestSubscription
  extends Promise<AsyncIterator<TestNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
}

export interface SchoolNode {
  id: ID_Output;
  name: String;
  email: String;
  phone?: String;
  pedagogyCoord?: String;
  director?: String;
  address?: String;
}

export interface School extends Promise<SchoolNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  olympiadCood: <T = User>() => T;
  pedagogyCoord: () => Promise<String>;
  director: () => Promise<String>;
  city: <T = City>() => T;
  address: () => Promise<String>;
}

export interface SchoolSubscription
  extends Promise<AsyncIterator<SchoolNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  olympiadCood: <T = UserSubscription>() => T;
  pedagogyCoord: () => Promise<AsyncIterator<String>>;
  director: () => Promise<AsyncIterator<String>>;
  city: <T = CitySubscription>() => T;
  address: () => Promise<AsyncIterator<String>>;
}

export interface OlympiadSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface OlympiadSubscriptionPayload
  extends Promise<OlympiadSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Olympiad>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OlympiadPreviousValues>() => T;
}

export interface OlympiadSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OlympiadSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OlympiadSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OlympiadPreviousValuesSubscription>() => T;
}

export interface QuestionEdgeNode {
  cursor: String;
}

export interface QuestionEdge extends Promise<QuestionEdgeNode>, Fragmentable {
  node: <T = Question>() => T;
  cursor: () => Promise<String>;
}

export interface QuestionEdgeSubscription
  extends Promise<AsyncIterator<QuestionEdgeNode>>,
    Fragmentable {
  node: <T = QuestionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateQuestionNode {
  count: Int;
}

export interface AggregateQuestion
  extends Promise<AggregateQuestionNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateQuestionSubscription
  extends Promise<AsyncIterator<AggregateQuestionNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TestSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface TestSubscriptionPayload
  extends Promise<TestSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Test>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TestPreviousValues>() => T;
}

export interface TestSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TestSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TestSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TestPreviousValuesSubscription>() => T;
}

export interface QuestionConnectionNode {}

export interface QuestionConnection
  extends Promise<QuestionConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<QuestionEdgeNode>>() => T;
  aggregate: <T = AggregateQuestion>() => T;
}

export interface QuestionConnectionSubscription
  extends Promise<AsyncIterator<QuestionConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<QuestionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateQuestionSubscription>() => T;
}

export interface OlympiadPreviousValuesNode {
  id: ID_Output;
  name: String;
  isPublished?: Boolean;
  year: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface OlympiadPreviousValues
  extends Promise<OlympiadPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  isPublished: () => Promise<Boolean>;
  year: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface OlympiadPreviousValuesSubscription
  extends Promise<AsyncIterator<OlympiadPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  year: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CityConnectionNode {}

export interface CityConnection
  extends Promise<CityConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<CityEdgeNode>>() => T;
  aggregate: <T = AggregateCity>() => T;
}

export interface CityConnectionSubscription
  extends Promise<AsyncIterator<CityConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CityEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCitySubscription>() => T;
}

export interface UserSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayload
  extends Promise<UserSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface TestPreviousValuesNode {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  description: String;
}

export interface TestPreviousValues
  extends Promise<TestPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  description: () => Promise<String>;
}

export interface TestPreviousValuesSubscription
  extends Promise<AsyncIterator<TestPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface UserEdgeNode {
  cursor: String;
}

export interface UserEdge extends Promise<UserEdgeNode>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdgeNode>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface QuestionSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface QuestionSubscriptionPayload
  extends Promise<QuestionSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Question>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = QuestionPreviousValues>() => T;
}

export interface QuestionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<QuestionSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = QuestionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = QuestionPreviousValuesSubscription>() => T;
}

export interface TestEdgeNode {
  cursor: String;
}

export interface TestEdge extends Promise<TestEdgeNode>, Fragmentable {
  node: <T = Test>() => T;
  cursor: () => Promise<String>;
}

export interface TestEdgeSubscription
  extends Promise<AsyncIterator<TestEdgeNode>>,
    Fragmentable {
  node: <T = TestSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SchoolConnectionNode {}

export interface SchoolConnection
  extends Promise<SchoolConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<SchoolEdgeNode>>() => T;
  aggregate: <T = AggregateSchool>() => T;
}

export interface SchoolConnectionSubscription
  extends Promise<AsyncIterator<SchoolConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SchoolEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSchoolSubscription>() => T;
}

export interface SchoolPreviousValuesNode {
  id: ID_Output;
  name: String;
  email: String;
  phone?: String;
  pedagogyCoord?: String;
  director?: String;
  address?: String;
}

export interface SchoolPreviousValues
  extends Promise<SchoolPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  pedagogyCoord: () => Promise<String>;
  director: () => Promise<String>;
  address: () => Promise<String>;
}

export interface SchoolPreviousValuesSubscription
  extends Promise<AsyncIterator<SchoolPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  pedagogyCoord: () => Promise<AsyncIterator<String>>;
  director: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
}

export interface SchoolSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface SchoolSubscriptionPayload
  extends Promise<SchoolSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = School>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SchoolPreviousValues>() => T;
}

export interface SchoolSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SchoolSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SchoolSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SchoolPreviousValuesSubscription>() => T;
}

export interface UserNode {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
}

export interface User extends Promise<UserNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  tests: <T = FragmentableArray<TestNode>>(
    args?: {
      where?: TestWhereInput;
      orderBy?: TestOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  tests: <T = Promise<AsyncIterator<TestSubscription>>>(
    args?: {
      where?: TestWhereInput;
      orderBy?: TestOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface QuestionPreviousValuesNode {
  id: ID_Output;
  type: QuestionType;
  wording: String;
  imageUrl?: String;
}

export interface QuestionPreviousValues
  extends Promise<QuestionPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<QuestionType>;
  wording: () => Promise<String>;
  imageUrl: () => Promise<String>;
}

export interface QuestionPreviousValuesSubscription
  extends Promise<AsyncIterator<QuestionPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<QuestionType>>;
  wording: () => Promise<AsyncIterator<String>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
}

export interface QuestionNode {
  id: ID_Output;
  type: QuestionType;
  wording: String;
  imageUrl?: String;
}

export interface Question extends Promise<QuestionNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<QuestionType>;
  wording: () => Promise<String>;
  imageUrl: () => Promise<String>;
}

export interface QuestionSubscription
  extends Promise<AsyncIterator<QuestionNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<QuestionType>>;
  wording: () => Promise<AsyncIterator<String>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSchoolNode {
  count: Int;
}

export interface AggregateSchool
  extends Promise<AggregateSchoolNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSchoolSubscription
  extends Promise<AsyncIterator<AggregateSchoolNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CityNode {
  id: ID_Output;
  name: String;
}

export interface City extends Promise<CityNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CitySubscription
  extends Promise<AsyncIterator<CityNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface OlympiadNode {
  id: ID_Output;
  name: String;
  isPublished?: Boolean;
  year: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface Olympiad extends Promise<OlympiadNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  isPublished: () => Promise<Boolean>;
  year: () => Promise<DateTimeOutput>;
  createdBy: <T = User>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface OlympiadSubscription
  extends Promise<AsyncIterator<OlympiadNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  year: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdBy: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`,
  secret: `${process.env["PRISMA_SECRET"]}`
});
export const prisma = new Prisma();
