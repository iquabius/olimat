# import * from "./__generated__/prisma.graphql"
scalar DateTime

type Query {
  node(id: ID!): Node
  city(id: ID!): City
  cities: [City!]!
  olympiad(id: ID!): Olympiad
  olympiads: [Olympiad!]!
  olympiadsFeed(first: Int, after: String): OlympiadFeed!
  question(id: ID!): Question
  questions: [Question!]!
  questionsConnection(
    where: QuestionWhereInput
    orderBy: QuestionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int): QuestionConnection!
  schools: [School!]!
  school(id: ID!): School
  tests: [Test!]!
  test(id: ID!): Test
  me: User
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  createCity(name: String!): City!
  deleteCity(id: ID!): City!
  updateCity(id: ID!, name: String!): City!
  createTest(title: String!, description: String!): Test!
  deleteTest(id: ID!): Test!
  createOlympiad(name: String!, year: DateTime!): Olympiad!
  createQuestion(input: QuestionCreateInput!): QuestionPayload!
  deleteQuestion(id: ID!): QuestionPayload!
  updateQuestion(input: UpdateQuestionInput!): QuestionPayload!
  createSchool(
    name: String!
    email: String!
    phone: String
    pedagogyCoord: String
    director: String
    city: String!
    address: String
  ): School!
  deleteOlympiad(id: ID!): Olympiad!
  deleteSchool(id: ID!): School!
}

# Precisa repetir aqui porque 'graphql get-schema' não importa as descrições
# E precisamos das descrições pra caixa de seleção do tipo no formulário
enum QUESTION_TYPE {
  """Múltipla escolha"""
  MULTIPLE_CHOICE
  """Discursiva"""
  OPEN_ENDED
}

type AuthPayload {
  token: String!
  user: User!
}

type QuestionPayload {
  # The question that was created. It is nullable so that if there is
  # an error then null won’t propagate past the `question`.
  question: Question
}

# This is a custom type
input UpdateQuestionInput {
  id: ID!
  # This is prisma's autogenerated type
  patch: QuestionUpdateInput!
}

"""
A connection to a list of items.
"""
type OlympiadFeed {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [OlympiadEdge]!
}

type User implements Node {
  id: ID!
  email: String!
  name: String!
  tests: [Test!]!
}

type Question implements Node {
  id: ID!
  """O tipo da questão, _múltipla escolha_ ou _discursiva_."""
  type: QUESTION_TYPE!
  """Enunciado da questão."""
  wording: String!
  imageUrl: String
  imageFullUrl: String
  """Enunciado secundário, depois da imagem."""
  secondaryWording: String
  """Alternativas da questão."""
  choices: [QuestionChoice!]!
}
