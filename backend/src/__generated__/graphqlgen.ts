// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from 'graphql';
import {
  City,
  Olympiad,
  User,
  Test,
  Question,
  QuestionChoice,
  PageInfo,
  OlympiadEdge,
  QuestionConnection,
  QuestionEdge,
  AggregateQuestion,
  School,
} from './prisma-client';
import { OlympiadFeed, AuthPayload, QuestionPayload } from '../types';
import { Context } from '../types';

type QUESTION_TYPE = 'MULTIPLE_CHOICE' | 'OPEN_ENDED';
type QuestionOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'type_ASC'
  | 'type_DESC'
  | 'wording_ASC'
  | 'wording_DESC'
  | 'imageUrl_ASC'
  | 'imageUrl_DESC'
  | 'secondaryWording_ASC'
  | 'secondaryWording_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface QuestionWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    type: QUESTION_TYPE | null;
    type_not: QUESTION_TYPE | null;
    type_in: QUESTION_TYPE[];
    type_not_in: QUESTION_TYPE[];
    wording: string | null;
    wording_not: string | null;
    wording_in: string[];
    wording_not_in: string[];
    wording_lt: string | null;
    wording_lte: string | null;
    wording_gt: string | null;
    wording_gte: string | null;
    wording_contains: string | null;
    wording_not_contains: string | null;
    wording_starts_with: string | null;
    wording_not_starts_with: string | null;
    wording_ends_with: string | null;
    wording_not_ends_with: string | null;
    imageUrl: string | null;
    imageUrl_not: string | null;
    imageUrl_in: string[];
    imageUrl_not_in: string[];
    imageUrl_lt: string | null;
    imageUrl_lte: string | null;
    imageUrl_gt: string | null;
    imageUrl_gte: string | null;
    imageUrl_contains: string | null;
    imageUrl_not_contains: string | null;
    imageUrl_starts_with: string | null;
    imageUrl_not_starts_with: string | null;
    imageUrl_ends_with: string | null;
    imageUrl_not_ends_with: string | null;
    secondaryWording: string | null;
    secondaryWording_not: string | null;
    secondaryWording_in: string[];
    secondaryWording_not_in: string[];
    secondaryWording_lt: string | null;
    secondaryWording_lte: string | null;
    secondaryWording_gt: string | null;
    secondaryWording_gte: string | null;
    secondaryWording_contains: string | null;
    secondaryWording_not_contains: string | null;
    secondaryWording_starts_with: string | null;
    secondaryWording_not_starts_with: string | null;
    secondaryWording_ends_with: string | null;
    secondaryWording_not_ends_with: string | null;
    choices_every: QuestionChoiceWhereInput | null;
    choices_some: QuestionChoiceWhereInput | null;
    choices_none: QuestionChoiceWhereInput | null;
    AND: QuestionWhereInput[];
    OR: QuestionWhereInput[];
    NOT: QuestionWhereInput[];
  }
  export interface QuestionChoiceWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    text: string | null;
    text_not: string | null;
    text_in: string[];
    text_not_in: string[];
    text_lt: string | null;
    text_lte: string | null;
    text_gt: string | null;
    text_gte: string | null;
    text_contains: string | null;
    text_not_contains: string | null;
    text_starts_with: string | null;
    text_not_starts_with: string | null;
    text_ends_with: string | null;
    text_not_ends_with: string | null;
    AND: QuestionChoiceWhereInput[];
    OR: QuestionChoiceWhereInput[];
    NOT: QuestionChoiceWhereInput[];
  }

  export interface ArgsNode {
    id: string;
  }

  export interface ArgsCity {
    id: string;
  }

  export interface ArgsOlympiad {
    id: string;
  }

  export interface ArgsOlympiadsFeed {
    first: number | null;
    after: string | null;
  }

  export interface ArgsQuestion {
    id: string;
  }

  export interface ArgsQuestionsConnection {
    where: QuestionWhereInput | null;
    orderBy: QuestionOrderByInput | null;
    skip: number | null;
    after: string | null;
    before: string | null;
    first: number | null;
    last: number | null;
  }

  export interface ArgsSchool {
    id: string;
  }

  export interface ArgsTest {
    id: string;
  }

  export type NodeResolver = (
    parent: undefined,
    args: ArgsNode,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => {} | null | Promise<{} | null>;

  export type CityResolver = (
    parent: undefined,
    args: ArgsCity,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => City | null | Promise<City | null>;

  export type CitiesResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => City[] | Promise<City[]>;

  export type OlympiadResolver = (
    parent: undefined,
    args: ArgsOlympiad,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Olympiad | null | Promise<Olympiad | null>;

  export type OlympiadsResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Olympiad[] | Promise<Olympiad[]>;

  export type OlympiadsFeedResolver = (
    parent: undefined,
    args: ArgsOlympiadsFeed,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => OlympiadFeed | Promise<OlympiadFeed>;

  export type QuestionResolver = (
    parent: undefined,
    args: ArgsQuestion,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Question | null | Promise<Question | null>;

  export type QuestionsResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Question[] | Promise<Question[]>;

  export type QuestionsConnectionResolver = (
    parent: undefined,
    args: ArgsQuestionsConnection,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => QuestionConnection | Promise<QuestionConnection>;

  export type SchoolsResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => School[] | Promise<School[]>;

  export type SchoolResolver = (
    parent: undefined,
    args: ArgsSchool,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => School | null | Promise<School | null>;

  export type TestsResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Test[] | Promise<Test[]>;

  export type TestResolver = (
    parent: undefined,
    args: ArgsTest,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Test | null | Promise<Test | null>;

  export type MeResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => User | null | Promise<User | null>;

  export interface Type {
    node: (
      parent: undefined,
      args: ArgsNode,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => {} | null | Promise<{} | null>;

    city: (
      parent: undefined,
      args: ArgsCity,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => City | null | Promise<City | null>;

    cities: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => City[] | Promise<City[]>;

    olympiad: (
      parent: undefined,
      args: ArgsOlympiad,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Olympiad | null | Promise<Olympiad | null>;

    olympiads: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Olympiad[] | Promise<Olympiad[]>;

    olympiadsFeed: (
      parent: undefined,
      args: ArgsOlympiadsFeed,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => OlympiadFeed | Promise<OlympiadFeed>;

    question: (
      parent: undefined,
      args: ArgsQuestion,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Question | null | Promise<Question | null>;

    questions: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Question[] | Promise<Question[]>;

    questionsConnection: (
      parent: undefined,
      args: ArgsQuestionsConnection,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => QuestionConnection | Promise<QuestionConnection>;

    schools: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => School[] | Promise<School[]>;

    school: (
      parent: undefined,
      args: ArgsSchool,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => School | null | Promise<School | null>;

    tests: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Test[] | Promise<Test[]>;

    test: (
      parent: undefined,
      args: ArgsTest,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Test | null | Promise<Test | null>;

    me: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => User | null | Promise<User | null>;
  }
}

export namespace CityResolvers {
  export const defaultResolvers = {
    id: (parent: City) => parent.id,
    name: (parent: City) => parent.name,
  };

  export type IdResolver = (
    parent: City,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: City,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: City,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    name: (
      parent: City,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;
  }
}

export namespace OlympiadResolvers {
  export const defaultResolvers = {
    id: (parent: Olympiad) => parent.id,
    name: (parent: Olympiad) => parent.name,
    isPublished: (parent: Olympiad) =>
      parent.isPublished === undefined ? null : parent.isPublished,
    year: (parent: Olympiad) => parent.year,
    createdAt: (parent: Olympiad) => parent.createdAt,
    updatedAt: (parent: Olympiad) => parent.updatedAt,
  };

  export type IdResolver = (
    parent: Olympiad,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Olympiad,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type IsPublishedResolver = (
    parent: Olympiad,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => boolean | null | Promise<boolean | null>;

  export type YearResolver = (
    parent: Olympiad,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type CreatedByResolver = (
    parent: Olympiad,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => User | Promise<User>;

  export type CreatedAtResolver = (
    parent: Olympiad,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: Olympiad,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: Olympiad,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    name: (
      parent: Olympiad,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    isPublished: (
      parent: Olympiad,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => boolean | null | Promise<boolean | null>;

    year: (
      parent: Olympiad,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    createdBy: (
      parent: Olympiad,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => User | Promise<User>;

    createdAt: (
      parent: Olympiad,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    updatedAt: (
      parent: Olympiad,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    email: (parent: User) => parent.email,
    name: (parent: User) => parent.name,
  };

  export type IdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type EmailResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type TestsResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Test[] | Promise<Test[]>;

  export interface Type {
    id: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    email: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    name: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    tests: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Test[] | Promise<Test[]>;
  }
}

export namespace TestResolvers {
  export const defaultResolvers = {
    id: (parent: Test) => parent.id,
    title: (parent: Test) => parent.title,
    description: (parent: Test) => (parent.description === undefined ? null : parent.description),
    createdAt: (parent: Test) => parent.createdAt,
    updatedAt: (parent: Test) => parent.updatedAt,
  };

  export interface QuestionWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    type: QUESTION_TYPE | null;
    type_not: QUESTION_TYPE | null;
    type_in: QUESTION_TYPE[];
    type_not_in: QUESTION_TYPE[];
    wording: string | null;
    wording_not: string | null;
    wording_in: string[];
    wording_not_in: string[];
    wording_lt: string | null;
    wording_lte: string | null;
    wording_gt: string | null;
    wording_gte: string | null;
    wording_contains: string | null;
    wording_not_contains: string | null;
    wording_starts_with: string | null;
    wording_not_starts_with: string | null;
    wording_ends_with: string | null;
    wording_not_ends_with: string | null;
    imageUrl: string | null;
    imageUrl_not: string | null;
    imageUrl_in: string[];
    imageUrl_not_in: string[];
    imageUrl_lt: string | null;
    imageUrl_lte: string | null;
    imageUrl_gt: string | null;
    imageUrl_gte: string | null;
    imageUrl_contains: string | null;
    imageUrl_not_contains: string | null;
    imageUrl_starts_with: string | null;
    imageUrl_not_starts_with: string | null;
    imageUrl_ends_with: string | null;
    imageUrl_not_ends_with: string | null;
    secondaryWording: string | null;
    secondaryWording_not: string | null;
    secondaryWording_in: string[];
    secondaryWording_not_in: string[];
    secondaryWording_lt: string | null;
    secondaryWording_lte: string | null;
    secondaryWording_gt: string | null;
    secondaryWording_gte: string | null;
    secondaryWording_contains: string | null;
    secondaryWording_not_contains: string | null;
    secondaryWording_starts_with: string | null;
    secondaryWording_not_starts_with: string | null;
    secondaryWording_ends_with: string | null;
    secondaryWording_not_ends_with: string | null;
    choices_every: QuestionChoiceWhereInput | null;
    choices_some: QuestionChoiceWhereInput | null;
    choices_none: QuestionChoiceWhereInput | null;
    AND: QuestionWhereInput[];
    OR: QuestionWhereInput[];
    NOT: QuestionWhereInput[];
  }
  export interface QuestionChoiceWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    text: string | null;
    text_not: string | null;
    text_in: string[];
    text_not_in: string[];
    text_lt: string | null;
    text_lte: string | null;
    text_gt: string | null;
    text_gte: string | null;
    text_contains: string | null;
    text_not_contains: string | null;
    text_starts_with: string | null;
    text_not_starts_with: string | null;
    text_ends_with: string | null;
    text_not_ends_with: string | null;
    AND: QuestionChoiceWhereInput[];
    OR: QuestionChoiceWhereInput[];
    NOT: QuestionChoiceWhereInput[];
  }

  export interface ArgsQuestions {
    where: QuestionWhereInput | null;
    orderBy: QuestionOrderByInput | null;
    skip: number | null;
    after: string | null;
    before: string | null;
    first: number | null;
    last: number | null;
  }

  export type IdResolver = (
    parent: Test,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type TitleResolver = (
    parent: Test,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type DescriptionResolver = (
    parent: Test,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type AuthorResolver = (
    parent: Test,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => User | Promise<User>;

  export type QuestionsResolver = (
    parent: Test,
    args: ArgsQuestions,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Question[] | Promise<Question[]>;

  export type CreatedAtResolver = (
    parent: Test,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: Test,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: Test,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    title: (
      parent: Test,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    description: (
      parent: Test,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    author: (
      parent: Test,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => User | Promise<User>;

    questions: (
      parent: Test,
      args: ArgsQuestions,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Question[] | Promise<Question[]>;

    createdAt: (
      parent: Test,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    updatedAt: (
      parent: Test,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;
  }
}

export namespace QuestionResolvers {
  export const defaultResolvers = {
    id: (parent: Question) => parent.id,
    type: (parent: Question) => parent.type,
    wording: (parent: Question) => parent.wording,
    imageUrl: (parent: Question) => (parent.imageUrl === undefined ? null : parent.imageUrl),
    secondaryWording: (parent: Question) =>
      parent.secondaryWording === undefined ? null : parent.secondaryWording,
  };

  export type IdResolver = (
    parent: Question,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type TypeResolver = (
    parent: Question,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => QUESTION_TYPE | Promise<QUESTION_TYPE>;

  export type WordingResolver = (
    parent: Question,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type ImageUrlResolver = (
    parent: Question,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type ImageFullUrlResolver = (
    parent: Question,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type SecondaryWordingResolver = (
    parent: Question,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type ChoicesResolver = (
    parent: Question,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => QuestionChoice[] | Promise<QuestionChoice[]>;

  export interface Type {
    id: (
      parent: Question,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    type: (
      parent: Question,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => QUESTION_TYPE | Promise<QUESTION_TYPE>;

    wording: (
      parent: Question,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    imageUrl: (
      parent: Question,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    imageFullUrl: (
      parent: Question,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    secondaryWording: (
      parent: Question,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    choices: (
      parent: Question,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => QuestionChoice[] | Promise<QuestionChoice[]>;
  }
}

export namespace QuestionChoiceResolvers {
  export const defaultResolvers = {
    id: (parent: QuestionChoice) => parent.id,
    text: (parent: QuestionChoice) => parent.text,
  };

  export type IdResolver = (
    parent: QuestionChoice,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type TextResolver = (
    parent: QuestionChoice,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: QuestionChoice,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    text: (
      parent: QuestionChoice,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;
  }
}

export namespace OlympiadFeedResolvers {
  export const defaultResolvers = {
    pageInfo: (parent: OlympiadFeed) => parent.pageInfo,
    edges: (parent: OlympiadFeed) => parent.edges,
  };

  export type PageInfoResolver = (
    parent: OlympiadFeed,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => PageInfo | Promise<PageInfo>;

  export type EdgesResolver = (
    parent: OlympiadFeed,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => OlympiadEdge[] | Promise<OlympiadEdge[]>;

  export interface Type {
    pageInfo: (
      parent: OlympiadFeed,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => PageInfo | Promise<PageInfo>;

    edges: (
      parent: OlympiadFeed,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => OlympiadEdge[] | Promise<OlympiadEdge[]>;
  }
}

export namespace PageInfoResolvers {
  export const defaultResolvers = {
    hasNextPage: (parent: PageInfo) => parent.hasNextPage,
    hasPreviousPage: (parent: PageInfo) => parent.hasPreviousPage,
    startCursor: (parent: PageInfo) =>
      parent.startCursor === undefined ? null : parent.startCursor,
    endCursor: (parent: PageInfo) => (parent.endCursor === undefined ? null : parent.endCursor),
  };

  export type HasNextPageResolver = (
    parent: PageInfo,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => boolean | Promise<boolean>;

  export type HasPreviousPageResolver = (
    parent: PageInfo,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => boolean | Promise<boolean>;

  export type StartCursorResolver = (
    parent: PageInfo,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type EndCursorResolver = (
    parent: PageInfo,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export interface Type {
    hasNextPage: (
      parent: PageInfo,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => boolean | Promise<boolean>;

    hasPreviousPage: (
      parent: PageInfo,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => boolean | Promise<boolean>;

    startCursor: (
      parent: PageInfo,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    endCursor: (
      parent: PageInfo,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;
  }
}

export namespace OlympiadEdgeResolvers {
  export const defaultResolvers = {
    node: (parent: OlympiadEdge) => parent.node,
    cursor: (parent: OlympiadEdge) => parent.cursor,
  };

  export type NodeResolver = (
    parent: OlympiadEdge,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Olympiad | Promise<Olympiad>;

  export type CursorResolver = (
    parent: OlympiadEdge,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export interface Type {
    node: (
      parent: OlympiadEdge,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Olympiad | Promise<Olympiad>;

    cursor: (
      parent: OlympiadEdge,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;
  }
}

export namespace QuestionConnectionResolvers {
  export const defaultResolvers = {
    pageInfo: (parent: QuestionConnection) => parent.pageInfo,
    edges: (parent: QuestionConnection) => parent.edges,
  };

  export type PageInfoResolver = (
    parent: QuestionConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => PageInfo | Promise<PageInfo>;

  export type EdgesResolver = (
    parent: QuestionConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => QuestionEdge[] | Promise<QuestionEdge[]>;

  export type AggregateResolver = (
    parent: QuestionConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => AggregateQuestion | Promise<AggregateQuestion>;

  export interface Type {
    pageInfo: (
      parent: QuestionConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => PageInfo | Promise<PageInfo>;

    edges: (
      parent: QuestionConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => QuestionEdge[] | Promise<QuestionEdge[]>;

    aggregate: (
      parent: QuestionConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => AggregateQuestion | Promise<AggregateQuestion>;
  }
}

export namespace QuestionEdgeResolvers {
  export const defaultResolvers = {
    node: (parent: QuestionEdge) => parent.node,
    cursor: (parent: QuestionEdge) => parent.cursor,
  };

  export type NodeResolver = (
    parent: QuestionEdge,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Question | Promise<Question>;

  export type CursorResolver = (
    parent: QuestionEdge,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export interface Type {
    node: (
      parent: QuestionEdge,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Question | Promise<Question>;

    cursor: (
      parent: QuestionEdge,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;
  }
}

export namespace AggregateQuestionResolvers {
  export const defaultResolvers = {
    count: (parent: AggregateQuestion) => parent.count,
  };

  export type CountResolver = (
    parent: AggregateQuestion,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => number | Promise<number>;

  export interface Type {
    count: (
      parent: AggregateQuestion,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => number | Promise<number>;
  }
}

export namespace SchoolResolvers {
  export const defaultResolvers = {
    id: (parent: School) => parent.id,
    name: (parent: School) => parent.name,
    email: (parent: School) => parent.email,
    phone: (parent: School) => (parent.phone === undefined ? null : parent.phone),
    pedagogyCoord: (parent: School) =>
      parent.pedagogyCoord === undefined ? null : parent.pedagogyCoord,
    director: (parent: School) => (parent.director === undefined ? null : parent.director),
    address: (parent: School) => (parent.address === undefined ? null : parent.address),
  };

  export type IdResolver = (
    parent: School,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: School,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type EmailResolver = (
    parent: School,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type PhoneResolver = (
    parent: School,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type OlympiadCoodResolver = (
    parent: School,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => User | Promise<User>;

  export type PedagogyCoordResolver = (
    parent: School,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type DirectorResolver = (
    parent: School,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type CityResolver = (
    parent: School,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => City | Promise<City>;

  export type AddressResolver = (
    parent: School,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export interface Type {
    id: (
      parent: School,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    name: (
      parent: School,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    email: (
      parent: School,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    phone: (
      parent: School,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    olympiadCood: (
      parent: School,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => User | Promise<User>;

    pedagogyCoord: (
      parent: School,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    director: (
      parent: School,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    city: (
      parent: School,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => City | Promise<City>;

    address: (
      parent: School,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface QuestionCreateInput {
    type: QUESTION_TYPE;
    wording: string;
    imageUrl: string | null;
    secondaryWording: string | null;
    choices: QuestionChoiceCreateManyInput | null;
  }
  export interface QuestionChoiceCreateManyInput {
    create: QuestionChoiceCreateInput[];
    connect: QuestionChoiceWhereUniqueInput[];
  }
  export interface QuestionChoiceCreateInput {
    text: string;
  }
  export interface QuestionChoiceWhereUniqueInput {
    id: string | null;
  }
  export interface UpdateQuestionInput {
    id: string;
    patch: QuestionUpdateInput;
  }
  export interface QuestionUpdateInput {
    type: QUESTION_TYPE | null;
    wording: string | null;
    imageUrl: string | null;
    secondaryWording: string | null;
    choices: QuestionChoiceUpdateManyInput | null;
  }
  export interface QuestionChoiceUpdateManyInput {
    create: QuestionChoiceCreateInput[];
    update: QuestionChoiceUpdateWithWhereUniqueNestedInput[];
    upsert: QuestionChoiceUpsertWithWhereUniqueNestedInput[];
    delete: QuestionChoiceWhereUniqueInput[];
    connect: QuestionChoiceWhereUniqueInput[];
    disconnect: QuestionChoiceWhereUniqueInput[];
    deleteMany: QuestionChoiceScalarWhereInput[];
    updateMany: QuestionChoiceUpdateManyWithWhereNestedInput[];
  }
  export interface QuestionChoiceUpdateWithWhereUniqueNestedInput {
    where: QuestionChoiceWhereUniqueInput;
    data: QuestionChoiceUpdateDataInput;
  }
  export interface QuestionChoiceUpdateDataInput {
    text: string | null;
  }
  export interface QuestionChoiceUpsertWithWhereUniqueNestedInput {
    where: QuestionChoiceWhereUniqueInput;
    update: QuestionChoiceUpdateDataInput;
    create: QuestionChoiceCreateInput;
  }
  export interface QuestionChoiceScalarWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    text: string | null;
    text_not: string | null;
    text_in: string[];
    text_not_in: string[];
    text_lt: string | null;
    text_lte: string | null;
    text_gt: string | null;
    text_gte: string | null;
    text_contains: string | null;
    text_not_contains: string | null;
    text_starts_with: string | null;
    text_not_starts_with: string | null;
    text_ends_with: string | null;
    text_not_ends_with: string | null;
    AND: QuestionChoiceScalarWhereInput[];
    OR: QuestionChoiceScalarWhereInput[];
    NOT: QuestionChoiceScalarWhereInput[];
  }
  export interface QuestionChoiceUpdateManyWithWhereNestedInput {
    where: QuestionChoiceScalarWhereInput;
    data: QuestionChoiceUpdateManyDataInput;
  }
  export interface QuestionChoiceUpdateManyDataInput {
    text: string | null;
  }

  export interface ArgsSignup {
    email: string;
    password: string;
    name: string;
  }

  export interface ArgsLogin {
    email: string;
    password: string;
  }

  export interface ArgsCreateCity {
    name: string;
  }

  export interface ArgsDeleteCity {
    id: string;
  }

  export interface ArgsUpdateCity {
    id: string;
    name: string;
  }

  export interface ArgsCreateTest {
    title: string;
    description: string;
  }

  export interface ArgsDeleteTest {
    id: string;
  }

  export interface ArgsCreateOlympiad {
    name: string;
    year: string;
  }

  export interface ArgsCreateQuestion {
    input: QuestionCreateInput;
  }

  export interface ArgsDeleteQuestion {
    id: string;
  }

  export interface ArgsUpdateQuestion {
    input: UpdateQuestionInput;
  }

  export interface ArgsCreateSchool {
    name: string;
    email: string;
    phone: string | null;
    pedagogyCoord: string | null;
    director: string | null;
    city: string;
    address: string | null;
  }

  export interface ArgsDeleteOlympiad {
    id: string;
  }

  export interface ArgsDeleteSchool {
    id: string;
  }

  export type SignupResolver = (
    parent: undefined,
    args: ArgsSignup,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => AuthPayload | Promise<AuthPayload>;

  export type LoginResolver = (
    parent: undefined,
    args: ArgsLogin,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => AuthPayload | Promise<AuthPayload>;

  export type CreateCityResolver = (
    parent: undefined,
    args: ArgsCreateCity,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => City | Promise<City>;

  export type DeleteCityResolver = (
    parent: undefined,
    args: ArgsDeleteCity,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => City | Promise<City>;

  export type UpdateCityResolver = (
    parent: undefined,
    args: ArgsUpdateCity,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => City | Promise<City>;

  export type CreateTestResolver = (
    parent: undefined,
    args: ArgsCreateTest,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Test | Promise<Test>;

  export type DeleteTestResolver = (
    parent: undefined,
    args: ArgsDeleteTest,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Test | Promise<Test>;

  export type CreateOlympiadResolver = (
    parent: undefined,
    args: ArgsCreateOlympiad,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Olympiad | Promise<Olympiad>;

  export type CreateQuestionResolver = (
    parent: undefined,
    args: ArgsCreateQuestion,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => QuestionPayload | Promise<QuestionPayload>;

  export type DeleteQuestionResolver = (
    parent: undefined,
    args: ArgsDeleteQuestion,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => QuestionPayload | Promise<QuestionPayload>;

  export type UpdateQuestionResolver = (
    parent: undefined,
    args: ArgsUpdateQuestion,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => QuestionPayload | Promise<QuestionPayload>;

  export type CreateSchoolResolver = (
    parent: undefined,
    args: ArgsCreateSchool,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => School | Promise<School>;

  export type DeleteOlympiadResolver = (
    parent: undefined,
    args: ArgsDeleteOlympiad,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Olympiad | Promise<Olympiad>;

  export type DeleteSchoolResolver = (
    parent: undefined,
    args: ArgsDeleteSchool,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => School | Promise<School>;

  export interface Type {
    signup: (
      parent: undefined,
      args: ArgsSignup,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => AuthPayload | Promise<AuthPayload>;

    login: (
      parent: undefined,
      args: ArgsLogin,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => AuthPayload | Promise<AuthPayload>;

    createCity: (
      parent: undefined,
      args: ArgsCreateCity,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => City | Promise<City>;

    deleteCity: (
      parent: undefined,
      args: ArgsDeleteCity,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => City | Promise<City>;

    updateCity: (
      parent: undefined,
      args: ArgsUpdateCity,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => City | Promise<City>;

    createTest: (
      parent: undefined,
      args: ArgsCreateTest,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Test | Promise<Test>;

    deleteTest: (
      parent: undefined,
      args: ArgsDeleteTest,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Test | Promise<Test>;

    createOlympiad: (
      parent: undefined,
      args: ArgsCreateOlympiad,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Olympiad | Promise<Olympiad>;

    createQuestion: (
      parent: undefined,
      args: ArgsCreateQuestion,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => QuestionPayload | Promise<QuestionPayload>;

    deleteQuestion: (
      parent: undefined,
      args: ArgsDeleteQuestion,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => QuestionPayload | Promise<QuestionPayload>;

    updateQuestion: (
      parent: undefined,
      args: ArgsUpdateQuestion,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => QuestionPayload | Promise<QuestionPayload>;

    createSchool: (
      parent: undefined,
      args: ArgsCreateSchool,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => School | Promise<School>;

    deleteOlympiad: (
      parent: undefined,
      args: ArgsDeleteOlympiad,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Olympiad | Promise<Olympiad>;

    deleteSchool: (
      parent: undefined,
      args: ArgsDeleteSchool,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => School | Promise<School>;
  }
}

export namespace AuthPayloadResolvers {
  export const defaultResolvers = {
    token: (parent: AuthPayload) => parent.token,
    user: (parent: AuthPayload) => parent.user,
  };

  export type TokenResolver = (
    parent: AuthPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type UserResolver = (
    parent: AuthPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => User | Promise<User>;

  export interface Type {
    token: (
      parent: AuthPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    user: (
      parent: AuthPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => User | Promise<User>;
  }
}

export namespace QuestionPayloadResolvers {
  export const defaultResolvers = {
    question: (parent: QuestionPayload) => (parent.question === undefined ? null : parent.question),
  };

  export type QuestionResolver = (
    parent: QuestionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Question | null | Promise<Question | null>;

  export interface Type {
    question: (
      parent: QuestionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Question | null | Promise<Question | null>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  City: CityResolvers.Type;
  Olympiad: OlympiadResolvers.Type;
  User: UserResolvers.Type;
  Test: TestResolvers.Type;
  Question: QuestionResolvers.Type;
  QuestionChoice: QuestionChoiceResolvers.Type;
  OlympiadFeed: OlympiadFeedResolvers.Type;
  PageInfo: PageInfoResolvers.Type;
  OlympiadEdge: OlympiadEdgeResolvers.Type;
  QuestionConnection: QuestionConnectionResolvers.Type;
  QuestionEdge: QuestionEdgeResolvers.Type;
  AggregateQuestion: AggregateQuestionResolvers.Type;
  School: SchoolResolvers.Type;
  Mutation: MutationResolvers.Type;
  AuthPayload: AuthPayloadResolvers.Type;
  QuestionPayload: QuestionPayloadResolvers.Type;
}
